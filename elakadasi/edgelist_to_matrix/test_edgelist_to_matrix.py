data = [
    (1,1,3),
    (1,2,2),
    (2,1,2),
    (2,4,1),
]

data1 = [
(27,1,1),
(33,1,1),
(59,1,1),
(22,2,1),
(27,2,1),
(7,5,1),
(9,5,1),
(11,5,2),
(12,5,1),
(32,5,1),
(33,5,1),
(53,5,1),
(62,5,1),
(67,5,1),
(73,5,1),
(41,6,1),
(46,6,1),
(1,7,1),
(11,7,1),
(12,7,2),
(15,7,1),
(16,7,1),
(20,7,3),
(25,7,1),
(26,7,1),
(27,7,5),
(33,7,3),
(39,7,1),
(43,7,1),
(48,7,1),
(51,7,1),
(53,7,1),
(56,7,2),
(59,7,2),
(62,7,1),
(63,7,1),
(64,7,1),
(67,7,1),
(20,8,1),
(27,8,1),
(37,8,1),
(41,8,1),
(51,8,1),
(58,8,1),
(11,9,1),
(73,9,1),
(13,11,1),
(48,11,1),
(73,11,1),
(7,12,1),
(20,12,5),
(27,12,7),
(33,12,2),
(36,12,1),
(41,12,1),
(43,12,1),
(45,12,1),
(59,12,1),
(62,12,1),
(70,12,1),
(72,12,1),
(7,13,2),
(10,13,1),
(12,13,4),
(15,13,1),
(19,13,2),
(20,13,1),
(23,13,1),
(24,13,1),
(27,13,5),
(30,13,3),
(33,13,5),
(44,13,2),
(45,13,1),
(46,13,3),
(48,13,3),
(56,13,3),
(57,13,1),
(61,13,1),
(62,13,3),
(63,13,2),
(64,13,1),
(65,13,1),
(19,14,1),
(63,15,1),
(13,16,1),
(20,16,1),
(41,16,1),
(62,16,1),
(8,17,1),
(20,17,1),
(27,17,1),
(37,17,1),
(41,17,1),
(51,17,1),
(27,18,1),
(59,18,1),
(62,18,1),
(11,19,1),
(13,19,1),
(27,19,1),
(48,19,1),
(52,19,1),
(27,20,1),
(37,20,1),
(41,20,1),
(43,20,1),
(46,20,1),
(51,20,1),
(57,20,2),
(13,21,1),
(33,21,1),
(48,21,1),
(62,21,1),
(1,22,2),
(7,22,2),
(11,22,1),
(19,22,1),
(25,22,1),
(26,22,1),
(27,22,4),
(31,22,1),
(33,22,1),
(43,22,1),
(48,22,1),
(50,22,1),
(59,22,1),
(62,22,1),
(10,23,1),
(13,24,1),
(56,24,1),
(63,24,1),
(5,25,1),
(7,25,3),
(11,25,1),
(12,25,1),
(13,25,1),
(26,25,1),
(27,25,1),
(33,25,2),
(34,25,2),
(43,25,2),
(46,25,1),
(51,25,1),
(55,25,1),
(62,25,1),
(67,25,2),
(7,26,1),
(11,26,1),
(16,26,1),
(22,26,2),
(27,26,2),
(31,26,1),
(38,26,1),
(56,26,1),
(1,27,1),
(4,27,1),
(7,27,5),
(11,27,1),
(12,27,6),
(13,27,5),
(15,27,1),
(19,27,1),
(20,27,8),
(22,27,4),
(25,27,2),
(26,27,2),
(27,27,1),
(31,27,1),
(33,27,3),
(35,27,1),
(37,27,2),
(38,27,2),
(39,27,1),
(41,27,1),
(43,27,3),
(46,27,2),
(47,27,1),
(48,27,1),
(51,27,4),
(52,27,1),
(53,27,3),
(54,27,2),
(56,27,3),
(59,27,3),
(62,27,5),
(63,27,1),
(64,27,1),
(38,28,1),
(49,28,1),
(13,29,1),
(44,29,1),
(13,30,5),
(24,30,2),
(27,30,1),
(29,30,1),
(44,30,1),
(46,30,1),
(48,30,1),
(56,30,2),
(61,30,1),
(62,30,1),
(63,30,1),
(65,30,1),
(62,32,1),
(10,33,1),
(11,33,1),
(12,33,10),
(13,33,6),
(19,33,2),
(20,33,4),
(23,33,1),
(27,33,11),
(30,33,1),
(34,33,3),
(39,33,1),
(41,33,1),
(45,33,1),
(46,33,7),
(56,33,4),
(62,33,3),
(64,33,3),
(67,33,2),
(70,33,1),
(12,34,3),
(13,34,3),
(27,34,2),
(30,34,1),
(33,34,2),
(46,34,1),
(56,34,1),
(62,34,2),
(7,35,1),
(9,35,1),
(12,35,1),
(20,35,1),
(27,35,2),
(53,35,1),
(62,35,1),
(72,35,1),
(7,36,2),
(12,36,3),
(20,36,2),
(27,36,4),
(33,36,2),
(39,36,1),
(47,36,1),
(51,36,1),
(53,36,2),
(59,36,2),
(62,36,1),
(4,37,1),
(27,37,1),
(45,37,1),
(51,37,1),
(12,39,2),
(20,39,2),
(27,39,1),
(43,39,1),
(3,40,1),
(42,40,1),
(20,41,1),
(22,41,1),
(27,41,2),
(37,41,2),
(46,41,1),
(50,41,1),
(51,41,1),
(53,41,2),
(3,42,1),
(7,43,1),
(20,43,1),
(51,43,1),
(13,44,3),
(19,44,1),
(27,44,1),
(33,44,1),
(63,44,2),
(1,45,2),
(5,45,2),
(7,45,3),
(8,45,1),
(9,45,1),
(11,45,3),
(12,45,7),
(13,45,2),
(16,45,1),
(17,45,1),
(18,45,1),
(19,45,1),
(20,45,2),
(21,45,1),
(22,45,4),
(25,45,1),
(26,45,1),
(27,45,17),
(33,45,7),
(34,45,2),
(36,45,1),
(37,45,2),
(41,45,5),
(43,45,1),
(46,45,2),
(47,45,1),
(48,45,1),
(50,45,1),
(51,45,3),
(52,45,1),
(53,45,6),
(55,45,1),
(56,45,2),
(59,45,3),
(62,45,4),
(67,45,4),
(68,45,1),
(73,45,1),
(7,46,1),
(11,46,1),
(12,46,3),
(13,46,4),
(20,46,5),
(27,46,7),
(33,46,4),
(34,46,2),
(48,46,2),
(54,46,1),
(56,46,3),
(62,46,3),
(64,46,1),
(74,46,1),
(11,47,1),
(13,47,1),
(27,47,1),
(33,47,1),
(46,47,1),
(51,47,1),
(56,47,1),
(67,47,1),
(13,48,1),
(15,48,1),
(20,48,2),
(26,48,1),
(27,48,5),
(31,48,1),
(33,48,1),
(38,48,2),
(54,48,1),
(62,48,1),
(63,48,1),
(13,49,1),
(27,49,1),
(38,49,1),
(47,49,1),
(22,50,1),
(27,51,1),
(4,53,1),
(12,53,2),
(13,53,1),
(22,53,1),
(27,53,2),
(33,53,1),
(37,53,2),
(50,53,1),
(59,53,2),
(62,53,1),
(20,54,1),
(38,54,1),
(7,55,1),
(27,55,1),
(43,55,1),
(51,55,1),
(7,56,1),
(11,56,1),
(12,56,2),
(13,56,2),
(16,56,1),
(20,56,2),
(26,56,1),
(27,56,3),
(33,56,1),
(38,56,1),
(46,56,2),
(63,56,1),
(7,57,2),
(8,57,1),
(9,57,1),
(11,57,1),
(13,57,5),
(15,57,1),
(16,57,1),
(19,57,2),
(20,57,3),
(26,57,2),
(27,57,5),
(30,57,3),
(33,57,2),
(35,57,1),
(38,57,1),
(44,57,1),
(46,57,5),
(48,57,4),
(54,57,1),
(56,57,3),
(58,57,2),
(59,57,1),
(62,57,3),
(63,57,1),
(65,57,1),
(74,57,1),
(59,58,1),
(2,60,1),
(22,60,1),
(27,60,1),
(13,61,1),
(24,61,1),
(62,61,1),
(1,62,1),
(7,62,1),
(10,62,1),
(12,62,4),
(13,62,14),
(15,62,1),
(19,62,2),
(20,62,1),
(23,62,1),
(24,62,1),
(27,62,7),
(30,62,3),
(33,62,6),
(36,62,1),
(38,62,1),
(44,62,2),
(45,62,1),
(46,62,2),
(48,62,2),
(53,62,1),
(56,62,2),
(57,62,1),
(59,62,2),
(61,62,1),
(63,62,2),
(65,62,1),
(13,63,3),
(24,63,1),
(27,63,1),
(30,63,1),
(61,63,1),
(7,64,1),
(12,64,1),
(13,64,2),
(25,64,1),
(26,64,1),
(27,64,3),
(30,64,1),
(33,64,1),
(46,64,1),
(56,64,1),
(67,64,1),
(27,65,1),
(36,65,1),
(47,65,1),
(51,65,1),
(7,66,1),
(12,66,1),
(20,66,1),
(27,66,1),
(35,66,1),
(72,66,1),
(9,67,1),
(11,67,1),
(12,67,5),
(13,67,1),
(14,67,1),
(19,67,2),
(20,67,1),
(22,67,1),
(27,67,6),
(33,67,7),
(34,67,3),
(35,67,1),
(36,67,1),
(43,67,1),
(46,67,4),
(47,67,1),
(51,67,1),
(53,67,1),
(56,67,1),
(62,67,2),
(64,67,1),
(65,67,1),
(12,68,1),
(27,68,1),
(33,68,1),
(34,68,1),
(27,69,1),
(33,69,1),
(46,69,1),
(56,69,1),
(30,71,1),
(7,72,1),
(20,72,1),
(27,72,2),
(33,72,1),
(1,73,1),
(33,73,1),
(34,73,1),
(46,73,1),
(33,75,1),
(34,75,1),
(46,75,1),
(73,75,1),
]
#import csv
#with open('data.csv') as f:
#    next(f) # Skip header
#    data = [map(int, row) for row in csv.reader(f)]
#    # Python 3.x: map(int, row) -> tuple(map(int, row))

n = max(max(user, item) for user, item, rating in data1) # Get size of matrix
matrix = [[0] * n for i in range(n)]

for user, item, rating in data1:
    matrix[user-1][item-1] = rating # Convert to 0-based index.

for row in matrix:
    print(row)

outF = open("my_matrix_CONVERTED.txt", "w")
for row in matrix:
    outF.write("%s," % row) # this was working
    outF.write("\n")

outF.close()